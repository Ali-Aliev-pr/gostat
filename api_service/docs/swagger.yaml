basePath: /api
definitions:
  http.CreateAppRequest:
    properties:
      name:
        description: |-
          Application name
          example: "My App"
        type: string
      url:
        description: |-
          Application URL
          example: "https://myapp.com"
        type: string
    type: object
  http.ErrorAppResp:
    properties:
      detail:
        description: |-
          Detailed error message
          example: "detailed error message"
        type: string
      error:
        description: |-
          Indicates an error occurred
          example: true
        type: boolean
    type: object
  http.ErrorAuthResponse:
    properties:
      error:
        description: |-
          Detailed error message
          in: body
          example: "login or password is not correct"
        type: string
    type: object
  http.ErrorGetVisitResponse:
    properties:
      detail:
        description: |-
          Detailed error message
          example: "Detailed error message"
        type: string
      error:
        description: |-
          Indicates an error occurred
          example: true
        type: boolean
    type: object
  http.ErrorSetVisitResponse:
    properties:
      detail:
        description: |-
          Detailed error message
          example: "Detailed error message"
        type: string
      error:
        description: |-
          Indicates an error occurred
          example: true
        type: boolean
    type: object
  http.ErrorVisitExtendResponse:
    properties:
      detail:
        description: |-
          Detailed error message
          example: "Detailed error message"
        type: string
      error:
        description: |-
          Indicates an error occurred
          example: true
        type: boolean
    type: object
  http.SuccessAppResponse:
    properties:
      app:
        description: |-
          New application ID
          example: "new_app_id"
        type: string
      successfully:
        description: |-
          Indicates successful app creation
          example: true
        type: boolean
    type: object
  http.SuccessAuthConfirmResponse:
    properties:
      successful:
        description: |-
          Indicates whether the confirmation was successful
          example: true
        type: boolean
    type: object
  http.SuccessAuthResponse:
    properties:
      access_token:
        description: |-
          The generated JWT
          in: body
          example: "your_generated_token"
        type: string
    type: object
  http.SuccessSetVisitResponse:
    properties:
      session:
        description: |-
          Session ID for the visit
          example: "session_id"
        type: string
      successfully:
        description: |-
          Indicates successful visit setting or extending
          example: true
        type: boolean
    type: object
  http.SuccessVisitExtendResponse:
    properties:
      successfully:
        description: |-
          Indicates successful visit extension
          example: true
        type: boolean
    type: object
  http.UTMParams:
    properties:
      utm_campaign:
        type: string
      utm_content:
        type: string
      utm_medium:
        type: string
      utm_source:
        type: string
      utm_term:
        type: string
    type: object
  http.VisitData:
    properties:
      expired:
        type: boolean
      hash:
        type: string
      host:
        type: string
      pathname:
        type: string
      resolution:
        type: string
      title:
        type: string
      utm:
        $ref: '#/definitions/http.UTMParams'
    type: object
  service.LoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  service.RegistrationRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      login:
        type: string
      mail:
        type: string
      middle_name:
        type: string
      password:
        type: string
    type: object
  service.ResetConfirmPasswordRequest:
    properties:
      mail:
        type: string
      password:
        type: string
      secret:
        type: string
    type: object
  service.ResetPasswordRequest:
    properties:
      mail:
        description: |-
          The email address associated with the account
          required: true
          example: user@example.com
        type: string
    type: object
  service.UserApp:
    properties:
      created_at:
        description: |-
          Timestamp of application creation
          example: "2023-10-22T01:47:40+04:00"
        type: string
      id:
        description: |-
          Unique identifier of the application
          example: "8d8da463-767a-488c-9cc6-45dc35346507"
        type: string
      image:
        description: |-
          Image or icon of the application
          example: "default"
        type: string
      name:
        description: |-
          Name of the application
          example: "nikkhvat"
        type: string
      url:
        description: |-
          URL of the application
          example: "https://nik.khvat.pro"
        type: string
    type: object
  service.UserInfo:
    properties:
      account_confirmed:
        description: |-
          Account confirmation status
          example: false
        type: boolean
      apps:
        description: List of applications associated with the user
        items:
          $ref: '#/definitions/service.UserApp'
        type: array
      avatar:
        description: |-
          Avatar URL
          example: ""
        type: string
      created_at:
        description: |-
          Timestamp of account creation
          example: "2023-10-22 00:49:35"
        type: string
      email:
        description: |-
          Email address of the user
          example: "nik19ta.me1@gmail.com"
        type: string
      first_name:
        description: |-
          First name of the user
          example: "Nikita"
        type: string
      id:
        description: |-
          Unique identifier of the user
          example: 168
        type: integer
      last_name:
        description: |-
          Last name of the user
          example: "Khvatov"
        type: string
      login:
        description: |-
          Login name of the user
          example: "nik19ta.me1"
        type: string
      middle_name:
        description: |-
          Middle name of the user
          example: "Dmitrievich"
        type: string
    type: object
  service.UserSession:
    properties:
      created_at:
        type: string
      uuid:
        type: string
    type: object
info:
  contact:
    email: nik19ta.me@gmail.com
    name: Nikita Khvatov
    url: https://khvat.pro
  description: Statistics Service - gostat. A microservice-based service, written
    in Golang and TypeScript.
  license:
    name: GNU Affero General Public License v3.0
    url: https://github.com/nikkhvat/gostat/blob/master/LICENSE
  title: Gostat
  version: 1.0.0
paths:
  /api/stats/visit/{session}:
    patch:
      consumes:
      - application/json
      description: Endpoint to extend the duration of an active visit session.
      parameters:
      - description: Session ID
        in: path
        name: session
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.SuccessVisitExtendResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorVisitExtendResponse'
      summary: Extend the visit session duration
      tags:
      - stats
  /apps/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an application based on the application ID and user ID from
        the bearer token
      parameters:
      - description: Application ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"successfully\": true, \"app\": \"app_id\"}'
          schema:
            $ref: '#/definitions/http.SuccessAppResponse'
        "400":
          description: 'Example: {\"error\": true, \"detail\": \"detailed error message\"}'
          schema:
            $ref: '#/definitions/http.ErrorAppResp'
      security:
      - BearerAuth: []
      summary: Delete an application
      tags:
      - apps
  /apps/create:
    post:
      consumes:
      - application/json
      description: Create a new application with the given details
      parameters:
      - description: Create App payload
        in: body
        name: CreateAppRequest
        required: true
        schema:
          $ref: '#/definitions/http.CreateAppRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"successfully\": true, \"app\": \"deleted_app_id\"}'
          schema:
            $ref: '#/definitions/http.SuccessAppResponse'
        "400":
          description: 'Example: {\"error\": true, \"detail\": \"detailed error message\"}'
          schema:
            $ref: '#/definitions/http.ErrorAppResp'
      security:
      - BearerAuth: []
      summary: Create a new application
      tags:
      - apps
  /auth/confirm:
    post:
      consumes:
      - application/json
      description: Uses the secret provided in the URL to confirm the email of an
        account
      parameters:
      - description: Secret key for account confirmation
        in: query
        name: secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"successful\":true}'
          schema:
            $ref: '#/definitions/http.SuccessAuthConfirmResponse'
        "401":
          description: 'Example: {\"error\":\"Unexpected error, failed to verify account\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      summary: Confirm the email of an account
      tags:
      - authentication
  /auth/confirm/mail:
    post:
      consumes:
      - application/json
      description: Send an email with a code in order to confirm the account
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"successful\":true}'
          schema:
            $ref: '#/definitions/http.SuccessAuthConfirmResponse'
        "400":
          description: 'Example: {\"error\":\"Unexpected error, failed to send mail\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
        "401":
          description: 'Example: {\"error\":\"Invalid token\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      security:
      - BearerAuth: []
      summary: Send confirmation email
      tags:
      - authentication
  /auth/info:
    get:
      consumes:
      - application/json
      description: Get detailed information about a user's account and their associated
        applications
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user information
          schema:
            $ref: '#/definitions/service.UserInfo'
        "400":
          description: Invalid request parameters or error retrieving user information
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
        "401":
          description: 'Example: {\"Invalid token\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      security:
      - BearerAuth: []
      summary: Retrieve user account information
      tags:
      - authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Uses (login or email) and password for authentication to get access
        token
      parameters:
      - description: Login payload
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/service.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.SuccessAuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      summary: Authenticate a user and get access token
      tags:
      - authentication
  /auth/password/request:
    post:
      consumes:
      - application/json
      description: Sends a password reset email to the user.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent successfully
          schema:
            $ref: '#/definitions/http.SuccessAuthConfirmResponse'
        "400":
          description: Invalid request body or an error occurred while sending the
            email
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      summary: Request Password Reset
      tags:
      - authentication
  /auth/password/reset:
    post:
      consumes:
      - application/json
      description: Resets the user's password using a secret token sent to their email.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.ResetConfirmPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/http.SuccessAuthResponse'
        "400":
          description: Invalid request body or an error occurred while resetting the
            password
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      summary: Reset Password
      tags:
      - authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Uses the refresh token to generate a new access token
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"access_token\":\"your_new_generated_token\"}'
          schema:
            $ref: '#/definitions/http.SuccessAuthResponse'
        "401":
          description: 'Example: {\"error\":\"Invalid refresh token\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      summary: Refresh the access token
      tags:
      - authentication
  /auth/registration:
    post:
      consumes:
      - application/json
      description: Register a new user with the given details
      parameters:
      - description: Registration payload
        in: body
        name: RegistrationRequest
        required: true
        schema:
          $ref: '#/definitions/service.RegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"token\":\"YOUR_GENERATED_TOKEN\"}'
          schema:
            $ref: '#/definitions/http.SuccessAuthResponse'
        "400":
          description: 'Example: {\"error\":\"any error\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
        "409":
          description: 'Example: {\"error\":\"User with the same email already exists\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      summary: Register a new user
      tags:
      - authentication
  /auth/sessions:
    get:
      consumes:
      - application/json
      description: Returns all the sessions associated with a user, identified by
        their ID
      produces:
      - application/json
      responses:
        "200":
          description: List of user sessions with details
          schema:
            items:
              $ref: '#/definitions/service.UserSession'
            type: array
        "400":
          description: 'Example: {\"error\":\"error message describing why the retrieval
            failed\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      security:
      - BearerAuth: []
      summary: Retrieve all sessions of a user
      tags:
      - authentication
  /auth/token/revoke/{session}:
    post:
      consumes:
      - application/json
      description: Accepts a session identifier in UUID format and revokes it to invalidate
        the session
      parameters:
      - description: Session Identifier (UUID)
        in: path
        name: session
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Example: {\"successful\":true}'
          schema:
            $ref: '#/definitions/http.SuccessAuthConfirmResponse'
        "400":
          description: 'Example: {\"error\":\"Unexpected error, failed to revoke token\"}'
          schema:
            $ref: '#/definitions/http.ErrorAuthResponse'
      security:
      - BearerAuth: []
      summary: Revoke a user's session token
      tags:
      - authentication
  /stats/get/visits:
    get:
      consumes:
      - application/json
      description: Retrieves visits data for a specific application
      parameters:
      - description: Application ID
        in: query
        name: app
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved data. The structure of the data depends
            on the application.
          schema:
            type: object
        "400":
          description: 'Example: {\"error\": true, \"detail\": \"Detailed error message\"}'
          schema:
            $ref: '#/definitions/http.ErrorGetVisitResponse'
      security:
      - BearerAuth: []
      summary: Retrieve visits for an application
      tags:
      - stats
  /stats/set/visit/{app}:
    post:
      consumes:
      - application/json
      description: Endpoint for registering a new visit or extending an existing session.
      parameters:
      - description: Application ID
        in: path
        name: app
        required: true
        type: string
      - description: Visit Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/http.VisitData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.SuccessSetVisitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorSetVisitResponse'
      summary: Register a new visit or extend an existing session
      tags:
      - stats
swagger: "2.0"
