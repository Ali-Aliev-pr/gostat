version: '3.8'
services:
  api_service:
    build: ./api_service
    ports:
      - 8080:8080
    volumes:
      - ./api_service/.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=:8080
      - AUTH_HOST=auth_service:50051
      - STATS_HOST=stats_service:50050
      - APP_HOST=app_service:50052
      - GIN_MODE=release

  auth_service:
    build: ./auth_service
    ports:
      - 50051:50051
    volumes:
      - ./auth_service/.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=:50051
      - DB_HOST=db
      - DB_USER=author
      - DB_PASSWORD=password
      - DB_NAME=gostat_auth_service
      - DB_SSLMODE=disable

  stats_service:
    build: ./stats_service
    ports:
      - 50050:50050
    volumes:
      - ./stats_service/.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=:50050
      - DB_HOST=db
      - DB_USER=author
      - DB_PASSWORD=password
      - DB_NAME=gostat_stats_service
      - DB_SSLMODE=disable

  app_service:
    build: ./app_service
    ports:
      - 50052:50052
    volumes:
      - ./app_service/.env:/app/.env
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=:50052
      - DB_HOST=db
      - DB_USER=author
      - DB_PASSWORD=password
      - DB_NAME=gostat_app_service
      - DB_SSLMODE=disable

  db:
    image: postgres:13-alpine
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: statsdb
    volumes:
      - ./deploy/init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
